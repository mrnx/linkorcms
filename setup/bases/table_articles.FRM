a:1:{i:0;a:23:{i:0;i:1;i:1;s:2:"54";i:2;s:10:"1288816308";i:3;s:9:"Александр";i:4;s:19:"linkorcms@yandex.ru";i:5;s:12:"linkorcms.ru";i:6;s:46:"Общие принципы создания шаблонов для LinkorCMS";i:7;s:121:"Для обработки
шаблонов в проекте LinkorCMS был создан
специальный класс под названием Starkyt и
специальный синтаксис.";i:8;s:5523:"<H2>Общая информация и первые шаги</H2>

<P>Для обработки
    шаблонов в проекте LinkorCMS был создан
    специальный класс под названием Starkyt и
    специальный синтаксис.</P>

<P>Одна
    инсталляция LinkorCMS может содержать
    несколько шаблонов, устнавливать новые
    шаблоны очень легко, достаточно просто
    скопировать папку шаблона в папку
    «templates». Чтобы начать создавать новый
    шаблон рекомендуем делать это на основе
    темы IgrimTheme. Это шаблон по умолчанию
    который идет в дистрибутиве системы.
    Скопируйте папку IgrimTheme и переименуйте
    ее названием вашего шаблона. После этого
    в настройках сайта установите шаблон
    сайта на новую созданную тему.</P>

<H2>Основа шаблона</H2>

<P>Папка с
    шаблоном содержит множество файлов
    типа html. theme.html это главный шаблон с
    которого обычно и начинается модификация
    темы. Однако то что он главный в шаблоне
    не означает что он самый верхний в этапе
    компиляции. В системе существует еще
    один файл общего шаблона страницы, в
    котором прописывается генерируемая
    автоматически шапка страницы. Поэтому
    theme.html всегда начинается и заканчивается
    тегом body. Чтобы изменить дизайн сайта
    иногда достаточно просто отредактировать
    theme.html и style.css.</P>


<H2>Синтаксис</H2>

<P>Шаблоны
    имеют блочную структуру и компилируются
    иерархически начиная от главного файла
    theme.html и вниз, до шаблонов модулей и
    блоков.</P>

<H3>Блоки</H3>

<P>Основу
    синтаксиса шаблонов составляют
    <I>компилируемые блоки</I>. Блок обладает
    рядом свойств и полей. Блок содержит
    переменные, дочерние блоки, текст блока
    может загружаться из файла, текст блока
    может содержать другие блоки, блок может
    быть включен или выключен, блок может
    быть множественным и иметь алиас(асевдоним).</P>

<P>Все параметры
    и поведение блока устанавливаются
    программистами в коде программы, задача
    дизайнера грамотно их расставить в
    шаблоне.</P>

<P>Множественный
    блок компилируется много раз, каждая
    компиляция множественного блока может
    иметь свои переменные, свой файл или
    текст шаблона, и субблоки.</P>

<P>Вот пример описание
    блока в шаблоне:<BR><FONT COLOR="#0000ff">{content_box}Текст
    блока{/content_box}</FONT></P>

<P>Ясно что в
    этом случае дизайнер не знает как будет
    вести себя блок, иногда текста блока
    может не быть и он может загружаться
    автоматически, подставляться из программы
    или в него может быть загружен другой
    шаблон. Просто смотрите, если содержания
    блока нет, то его там скорее всего и не
    должно быть.</P>

<H4>Переменные блоков</H4>

<P>Для вставки
    данных в шаблон используются переменные.
    Переменные всегда привязаны к каким то
    блокам. Чтобы использовать переменные
    блока необходимо его открыть. Нельзя
    получить переменные блока вне его
    контекста. Переменные множественного
    блока могут меняться много раз во время
    его компиляции.</P>

<P>Чтобы
    вставить значение переменной нужно в
    фигурных скобках указать имя блока <I>или
    его псевдоним </I>и
    после точки написать имя переменной.
    Например:<BR>
    <FONT COLOR="#0000ff">{content_box}</FONT><BR>
    <FONT COLOR="#0000ff">{content_box.title} = {content_box_alias.title}</FONT><BR>
    <FONT COLOR="#0000ff">{/content_box}</FONT>
</P>

<P>
    Переменные как и блоки могут быть разных
    типов, переменные разных типов
    устанавливаются программистами.
    Переменные могут содержать только
    данные которые вставляются без обработки
    шаблонизатором и могут содержать имя
    шаблона который будет загружен и
    обработан шаблонизатором. Для дизайнера
    это не столь важно т.к. в любом случае в
    переменной будут данные.</P>

<H3>Блок с проверкой переменной</H3>

<P>В
    шаблоне можно создать блоки html кода
    которые будут вставляться в зависимости
    от значения какой-то переменной. Блок
    с проверкой переменной выглядит как
    обычный блок, у него тоже есть открывающая
    и закрывающая части, только вместо имени
    блока указывается имя блока и </SPAN><I>через
    двоеточие </I><SPAN STYLE="font-style: normal">имя
    проверяемой переменной.</P>

<P>
    Переменная будет преобразована к
    логическому типу так что если в ней 0,
    логическое значение false или пустая
    строка то вернется значение Лож и блок
    не выполниться, в любом другом случае
    блок выполниться.</P>

<P>
    Блоки с проверкой переменных удобно
    использовать когда необходимо скрыть
    какую то часть шаблона которая не
    используется в данный момент, или скрыть
    ссылки которые должен видеть только
    администратор.</P>

<P>Пример блока с проверкой переменной:<BR>
<FONT COLOR="#0000ff">{page:site_email}</FONT><BR>
<FONT COLOR="#0000ff">Веб</FONT><FONT COLOR="#0000ff"></FONT><FONT COLOR="#0000ff">мастер</FONT><FONT COLOR="#0000ff">:{page.site_email}</FONT><BR>
<FONT COLOR="#0000ff">{/page:site_email}</FONT></P>

<H2>Файл init.php</H2>

<P>Каждая тема
    может содержать файл инициализации
    init.php. Этот файл выполняется при создании
    шаблонизатора и может использоваться
    для его настройки, подключения файлов
    стилей и JavaScript, добавления мета тегов,
    изменения Doctype, а так же добавления новых
    вычисляемых переменных для использования
    в шаблоне.</P>";i:9;s:0:"";i:10;s:2:"39";i:11;s:1:"1";i:12;s:1:"0";i:13;s:1:"1";i:14;s:1:"1";i:15;s:1:"5";i:16;s:1:"1";i:17;s:1:"4";i:18;s:1:"0";i:19;s:1:"0";i:20;s:0:"";i:21;s:0:"";i:22;s:0:"";}}